name: Deploy WordPress

on:
  push:
    branches: [main]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up SSH Key
      run: |
        echo "${{ secrets.DEPLOY_KEY }}" > key.pem
        chmod 400 key.pem
    - name: Deploy WordPress via Bastion Host
      env:
        DB_ADDRESS: ${{ secrets.DB_ADDRESS }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      run: |
        set -e  # Exit on any error
        echo "üîç Checking required files..."
        ls -la wordpress/ || echo "‚ö†Ô∏è WordPress directory not found"
        ls -la wordpress.sql || echo "‚ö†Ô∏è wordpress.sql not found"
        echo "üìã App Server IPs: ${{ secrets.APP_SERVER_IPS }}"
        IFS=',' read -ra HOSTS <<< "${{ secrets.APP_SERVER_IPS }}"
        for host in "${HOSTS[@]}"; do
          echo "üöÄ Deploying to $host via bastion ${{ secrets.BASTION_IP }}..."
          
          # Test connectivity first
          echo "üîó Testing connection to $host..."
          ssh -o ProxyJump=${{ secrets.BASTION_USER }}@${{ secrets.BASTION_IP }} -i key.pem -o StrictHostKeyChecking=no -o ConnectTimeout=10 ${{ secrets.DEPLOY_USER }}@$host "echo 'Connection successful'" || {
            echo "‚ùå Failed to connect to $host"
            continue
          }
          
          # Copy files via bastion (ProxyJump)
          echo "üì§ Copying files to $host..."
          scp -o ProxyJump=${{ secrets.BASTION_USER }}@${{ secrets.BASTION_IP }} -i key.pem -o StrictHostKeyChecking=no wordpress/wordpress-files.tar.gz ${{ secrets.DEPLOY_USER }}@$host:/tmp/ || {
            echo "‚ùå Failed to copy wordpress-files.tar.gz to $host"
            continue
          }
          scp -o ProxyJump=${{ secrets.BASTION_USER }}@${{ secrets.BASTION_IP }} -i key.pem -o StrictHostKeyChecking=no wordpress.sql ${{ secrets.DEPLOY_USER }}@$host:/tmp/ || {
            echo "‚ùå Failed to copy wordpress.sql to $host"
            continue
          }
          # SSH to app server via bastion and deploy
          ssh -o ProxyJump=${{ secrets.BASTION_USER }}@${{ secrets.BASTION_IP }} -i key.pem -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@$host <<EOF
            echo "üì¶ Unpacking WordPress..."
            sudo systemctl stop httpd || true
            sudo rm -rf /var/www/html/*
            sudo mkdir -p /var/www/html
            sudo tar -xzf /tmp/wordpress-files.tar.gz -C /var/www/html/
            sudo chown -R apache:apache /var/www/html/
            echo "üìÑ Creating .env file..."
            cat <<EOT | sudo tee /var/www/html/.env > /dev/null
            DB_NAME=${{ secrets.DB_NAME }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_ADDRESS=${{ secrets.DB_ADDRESS }}
            EOT
            sudo chmod 640 /var/www/html/.env


            sudo chown apache:apache /var/www/html/.env
            sudo chmod 640 /var/www/html/.env

            echo "üõ¢Ô∏è Importing database..."
            mysql -h ${{ secrets.DB_ADDRESS }} -u ${{ secrets.DB_USER }} -p${{ secrets.DB_PASSWORD }} ${{ secrets.DB_NAME }} < /tmp/wordpress.sql

            echo "‚úÖ Restarting HTTPD"
            sudo systemctl start httpd
            
            echo "üßπ Cleaning up temp files..."
            rm -f /tmp/wordpress-files.tar.gz /tmp/wordpress.sql
            EOF
        done
